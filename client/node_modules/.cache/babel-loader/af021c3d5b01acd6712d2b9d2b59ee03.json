{"ast":null,"code":"// FIXME: fix any type for store\nexport const apiMiddlewareInitializer = apiClient => ({\n  dispatch\n}) => next => action => {\n  if (!action.types) {\n    next(action);\n    return;\n  }\n\n  if (action.types.length !== 3) {\n    console.warn('Wrong action types field => ', action.types);\n    return;\n  }\n\n  const {\n    type,\n    types,\n    api: requestData,\n    ...restActionFields\n  } = action;\n  const [REQUEST_TYPE, REQUEST_SUCCESS_TYPE, REQUEST_FAIL_TYPE] = types;\n\n  if (!requestData) {\n    console.warn('RequestData must hold params: url, method. requestData: ', requestData);\n    return;\n  }\n\n  dispatch({\n    type: REQUEST_TYPE,\n    ...restActionFields\n  });\n  return apiClient.request(requestData).then(payload => {\n    dispatch({\n      type: REQUEST_SUCCESS_TYPE,\n      ...restActionFields,\n      payload\n    });\n  }).catch(error => {\n    dispatch({\n      type: REQUEST_FAIL_TYPE,\n      error\n    });\n  });\n};","map":{"version":3,"sources":["/Users/Roman/Documents/Projects/node-test/phonebook/client/src/store/middlewares/apiMiddlewareInitializer/apiMiddlewareInitializer.ts"],"names":["apiMiddlewareInitializer","apiClient","dispatch","next","action","types","length","console","warn","type","api","requestData","restActionFields","REQUEST_TYPE","REQUEST_SUCCESS_TYPE","REQUEST_FAIL_TYPE","request","then","payload","catch","error"],"mappings":"AAIA;AACA,OAAO,MAAMA,wBAAwB,GAAIC,SAAD,IAA0B,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAChEC,IADuF,IAEnFC,MAAD,IAAwB;AAC3B,MAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;AACjBF,IAAAA,IAAI,CAACC,MAAD,CAAJ;AACA;AACD;;AAED,MAAIA,MAAM,CAACC,KAAP,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7BC,IAAAA,OAAO,CAACC,IAAR,CAAa,8BAAb,EAA6CJ,MAAM,CAACC,KAApD;AACA;AACD;;AAED,QAAM;AAAEI,IAAAA,IAAF;AAAQJ,IAAAA,KAAR;AAAeK,IAAAA,GAAG,EAAEC,WAApB;AAAiC,OAAGC;AAApC,MAAyDR,MAA/D;AACA,QAAM,CAACS,YAAD,EAAeC,oBAAf,EAAqCC,iBAArC,IAA0DV,KAAhE;;AAEA,MAAI,CAACM,WAAL,EAAkB;AAChBJ,IAAAA,OAAO,CAACC,IAAR,CAAa,0DAAb,EAAyEG,WAAzE;AACA;AACD;;AAEDT,EAAAA,QAAQ,CAAC;AACPO,IAAAA,IAAI,EAAEI,YADC;AAEP,OAAGD;AAFI,GAAD,CAAR;AAKA,SAAOX,SAAS,CACbe,OADI,CACIL,WADJ,EAEJM,IAFI,CAEEC,OAAD,IAAkC;AACtChB,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEK,oBADC;AAEP,SAAGF,gBAFI;AAGPM,MAAAA;AAHO,KAAD,CAAR;AAKD,GARI,EASJC,KATI,CASGC,KAAD,IAAW;AAChBlB,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEM,iBADC;AAEPK,MAAAA;AAFO,KAAD,CAAR;AAID,GAdI,CAAP;AAeD,CAzCM","sourcesContent":["import { Store } from 'redux';\nimport { ApiClient } from 'utils/apiClient/ApiClient';\nimport { ActionType } from 'store/typings';\n\n// FIXME: fix any type for store\nexport const apiMiddlewareInitializer = (apiClient: ApiClient) => ({ dispatch }: any) => (\n  next: (action: ActionType) => void,\n) => (action: ActionType) => {\n  if (!action.types) {\n    next(action);\n    return;\n  }\n\n  if (action.types.length !== 3) {\n    console.warn('Wrong action types field => ', action.types);\n    return;\n  }\n\n  const { type, types, api: requestData, ...restActionFields } = action;\n  const [REQUEST_TYPE, REQUEST_SUCCESS_TYPE, REQUEST_FAIL_TYPE] = types;\n\n  if (!requestData) {\n    console.warn('RequestData must hold params: url, method. requestData: ', requestData);\n    return;\n  }\n\n  dispatch({\n    type: REQUEST_TYPE,\n    ...restActionFields,\n  });\n\n  return apiClient\n    .request(requestData)\n    .then((payload: Record<string, any>) => {\n      dispatch({\n        type: REQUEST_SUCCESS_TYPE,\n        ...restActionFields,\n        payload,\n      });\n    })\n    .catch((error) => {\n      dispatch({\n        type: REQUEST_FAIL_TYPE,\n        error,\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}